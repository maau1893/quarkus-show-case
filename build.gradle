plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "1.7.21"
    id 'org.jetbrains.kotlin.kapt' version "1.7.21"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.7.21"
    id "io.gitlab.arturbosch.detekt" version "1.19.0"
    id 'io.quarkus'
}

apply from: 'versions.gradle'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-kotlin'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation 'io.quarkus:quarkus-config-yaml'

    implementation 'io.quarkus:quarkus-resteasy-reactive'
    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'
    implementation 'io.quarkus:quarkus-rest-client-reactive-jackson'

    implementation 'io.quarkus:quarkus-hibernate-validator'
    implementation 'io.quarkus:quarkus-hibernate-reactive-panache-kotlin'
    implementation 'io.quarkus:quarkus-reactive-pg-client'
    implementation 'io.quarkus:quarkus-liquibase'
    implementation 'org.postgresql:postgresql:42.5.1'

    implementation 'io.quarkus:quarkus-smallrye-opentracing'

    implementation 'io.quarkus:quarkus-smallrye-reactive-messaging-kafka'

    implementation "org.mapstruct:mapstruct:$mapstruct_version"
    kapt "org.mapstruct:mapstruct-processor:$mapstruct_version"

    testImplementation 'io.quarkus:quarkus-junit5'

    testImplementation "io.rest-assured:rest-assured:$rest_assured_version"
    testImplementation "io.rest-assured:kotlin-extensions:$rest_assured_version"

    testImplementation "io.smallrye.reactive:smallrye-reactive-messaging-in-memory:$reactive_messaging_in_memory_version"

    testImplementation 'io.quarkus:quarkus-test-h2'

    testImplementation "io.quarkiverse.mockk:quarkus-junit5-mockk:$quarkus_mockk_version"
}

group 'com.exxeta'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}

allOpen {
    annotation("javax.ws.rs.Path")
    annotation("javax.enterprise.context.ApplicationScoped")
    annotation("io.quarkus.test.junit.QuarkusTest")
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
    kotlinOptions.javaParameters = true
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

detekt {
    source = files("$projectDir/src/main/kotlin")
    config = files("$projectDir/config/detekt/detekt.yml")
}

kapt {
    arguments {
        arg("mapstruct.defaultComponentModel", "cdi")
        arg("mapstruct.defaultInjectionStrategy", "constructor")
    }
}

tasks.named("detekt").configure {
    reports {
        xml.required.set(true)
        xml.outputLocation.set(file("build/reports/detekt/detekt.xml"))

        html.required.set(true)
        html.outputLocation.set(file("build/reports/detekt/detekt.html"))

        txt.required.set(true)
        txt.outputLocation.set(file("build/reports/detekt/detekt.txt"))
    }
}

tasks.detekt.jvmTarget = JavaVersion.VERSION_11
